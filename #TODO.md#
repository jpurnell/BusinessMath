1. TIME SERIES & TEMPORAL FRAMEWORK

  Foundation for period-based modeling

  - Period Management
    - Date/period enumeration (daily, weekly, monthly, quarterly, annual)
    - Period arithmetic (add/subtract periods, period ranges)
    - Fiscal calendar support (fiscal year-end handling)
    - Period conversion utilities
  - Time Value of Money (TVM) - Complete Suite
    - Present Value (PV) calculations
    - Future Value (FV) calculations
    - Payment (PMT) calculations
    - Internal Rate of Return (IRR)
    - Modified Internal Rate of Return (MIRR)
    - Complete and move NPV from "In Process" to production
    - Payback period calculations
  - Growth & Trend Modeling
    - Compound Annual Growth Rate (CAGR)
    - Various growth curve functions (linear, exponential, S-curve, custom)
    - Seasonality indices and adjustments
    - Trend extrapolation methods

  ---
  1.5 STATISTICAL FUNCTIONS & MONTE CARLO SIMULATION

  Foundation for uncertainty modeling and risk analysis

  **Approach**: Test-Driven Development - Write tests first, then implementation

  - Probability Distributions (Phase 1 - v1.3.0)

    **Already Implemented** ✅:
    - Normal/Gaussian (DistributionNormal)
    - Uniform (DistributionUniform)
    - Triangular (DistributionTriangular)
    - Exponential (distributionExponential)
    - Gamma (distributionGamma)
    - Log-Normal (distributionLogNormal)
    - Geometric (distributionGeometric)
    - Logistic (distributionLogistic)
    - Rayleigh (DistributionRayleigh) ✅
    - Poisson (DistributionPoisson)
    - Bernoulli (bernoulliTrial)
    - Binomial (binomial)

    **Need to Add**:
    - Beta distribution (CRITICAL - bounded [0,1] for proportions, probabilities)
      - Function: `distributionBeta<T: Real>(alpha: T, beta: T) -> T`
      - Struct: `DistributionBeta: DistributionRandom`
      - Tests: Statistical properties, edge cases, conformance
      - Use cases: Project completion %, market share, success rates

    - Weibull distribution (HIGH - reliability, failure analysis)
      - Function: `distributionWeibull<T: Real>(shape: T, scale: T) -> T`
      - Struct: `DistributionWeibull: DistributionRandom`
      - Tests: Shape parameter effects, statistical validation
      - Use cases: Equipment failure, customer churn timing

    - Student's t-distribution (MEDIUM - small samples, fat tails)
      - Function: `distributionT<T: Real>(degreesOfFreedom: Int) -> T`
      - Struct: `DistributionT: DistributionRandom`
      - Use cases: Financial returns with fat tails

    - Chi-squared distribution (MEDIUM - variance analysis)
      - Function: `distributionChiSquared<T: Real>(degreesOfFreedom: Int) -> T`
      - Struct: `DistributionChiSquared: DistributionRandom`
      - Use cases: Goodness-of-fit tests, variance modeling

    - Pareto distribution (LOW - power laws, 80/20 rule)
      - Function: `distributionPareto<T: Real>(scale: T, shape: T) -> T`
      - Struct: `DistributionPareto: DistributionRandom`
      - Use cases: Wealth distribution, sales concentration

    - F-distribution (LOW - variance ratios)
      - Function: `distributionF<T: Real>(df1: Int, df2: Int) -> T`
      - Struct: `DistributionF: DistributionRandom`
      - Use cases: ANOVA, variance comparisons

  - Monte Carlo Simulation Framework

    **Phase 2.1 (v1.4.0) - Core Engine**:

    Foundation for running Monte Carlo simulations with multiple uncertain variables.

    - Percentiles<T: Real> struct
      - Properties: p5, p10, p25, p50 (median), p75, p90, p95, p99
      - Method: `percentile(_ p: T) -> T` for custom percentiles
      - Property: `interquartileRange` (IQR = p75 - p25)
      - Tests: Accuracy validation, edge cases, large datasets
      - Use cases: Risk thresholds, confidence bounds

    - SimulationStatistics<T: Real> struct
      - Properties: mean, median, stdDev, variance, min, max, skewness
      - Confidence intervals: 90%, 95%, 99%
      - Tests: Statistical correctness against known distributions
      - Use cases: Summary statistics for results

    - SimulationResults<T: Real> struct
      - Properties: values (all simulation outputs), statistics, percentiles
      - Methods:
        - `histogram(bins: Int) -> [(range, count)]` for visualization
        - `confidenceInterval(level: T) -> (lower, upper)`
        - `probabilityAbove(_ threshold: T) -> T`
        - `probabilityBelow(_ threshold: T) -> T`
        - `probabilityBetween(_ lower: T, _ upper: T) -> T`
      - Tests: Comprehensive result queries, probability calculations

    - SimulationInput struct (Protocol-based approach)
      - Properties: name, sampler (type-erased closure), metadata
      - Constructor 1: Accepts any `DistributionRandom` conforming type
      - Constructor 2: Accepts custom closure `@Sendable () -> Double`
      - Type erasure pattern for flexibility
      - Tests: Type compatibility, Sendable conformance, integration with existing distributions
      - Benefits: Works with Beta, Weibull, Normal, etc. + custom distributions

    - MonteCarloSimulation<T: Real> struct
      - Properties: iterations (Int), model function `([T]) -> T`
      - Method: `addInput(_ input: SimulationInput)` to add uncertain variables
      - Method: `run() throws -> SimulationResults<T>` to execute simulation
      - Error handling: SimulationError enum (insufficientIterations, invalidModel)
      - Tests:
        - Convergence (std error decreases with more iterations)
        - Known analytical solutions (sum of normals, etc.)
        - Performance (10K iterations in < 1s)
        - Edge cases (zero iterations, single iteration, 1M+ iterations)
      - Use cases: Revenue forecasting, project NPV, equipment failure analysis

    **Phase 2.2 (v1.4.1) - Risk Metrics**:

    Quantitative risk analysis with Value-at-Risk and tail risk measures.

    - Value-at-Risk (VaR) functions
      - Function: `valueAtRisk<T: Real>(values: [T], confidenceLevel: T) -> T`
      - Methods:
        - Historical (percentile-based) - simple, non-parametric
        - Parametric (assumes normal) - analytical, fast
        - Monte Carlo (from simulation) - flexible, captures all risks
      - Tests: Compare methods against known distributions, validate thresholds
      - Use cases: Portfolio risk, downside protection, regulatory compliance

    - Conditional Value-at-Risk (CVaR / Expected Shortfall)
      - Function: `conditionalVaR<T: Real>(values: [T], confidenceLevel: T) -> T`
      - Calculation: Average of losses beyond VaR threshold (tail risk)
      - Tests: Tail risk accuracy, comparison with theoretical values
      - Use cases: Expected loss in worst scenarios, stress testing

    - Integration with SimulationResults
      - Add convenience methods to SimulationResults
      - `var95`, `cvar95` properties for common risk metrics
      - Tests: Seamless integration, consistent results

    **Phase 2.3 (v1.4.2) - Scenario Analysis**:

    Deterministic scenario modeling with probability weighting.

    - Scenario struct
      - Properties: name, probability, inputs (fixed values as [String: T])
      - Description field for narrative
      - Validation: probabilities sum to 1.0
      - Tests: Scenario creation, probability validation

    - ScenarioAnalysis<T: Real> struct
      - Properties: scenarios array, model function
      - Methods:
        - `run() -> ScenarioResults<T>` executes all scenarios
        - `expectedValue() -> T` probability-weighted average
        - `compare() -> [(scenario: String, value: T, delta: T)]` scenario comparison
      - Properties: bestCase, worstCase, baseCase results
      - Tests: Probability weighting accuracy, multi-scenario analysis
      - Use cases: Base/bull/bear cases, strategic planning, sensitivity analysis

  - Correlated Variables (Phase 3 - v1.5.0)

    **Correlation Support**:
    - CorrelatedNormals struct
      - Properties: means vector, correlation matrix
      - Method: `sample() -> [Double]`
      - Implementation: Cholesky decomposition
      - Tests: Verify output correlations match input matrix

    - Correlation matrix validation
      - Check symmetry
      - Check positive semi-definite
      - Error handling for invalid matrices

    - Multi-variable Monte Carlo support
      - Integrate with MonteCarloSimulation
      - Handle correlated inputs
      - Tests: Multi-variable scenarios with correlation

  - TimeSeries Statistical Methods (Phase 4 - v1.6.0)

    **Enhance TimeSeriesAnalytics**:
    - `correlation(with: TimeSeries<T>) -> T`
      - Pearson correlation between two series
      - Handle different period alignments
      - Tests: Compare with existing correlation functions

    - `covariance(with: TimeSeries<T>) -> T`
      - Covariance between two series
      - Integrate with existing covariance functions
      - Tests: Validate against statistical formulas

    - `rollingCorrelation(with: TimeSeries<T>, window: Int) -> TimeSeries<T>`
      - Moving window correlation
      - Use optimized sliding window approach
      - Tests: Window accuracy, edge cases

  ---
  3. OPERATIONAL DRIVERS

  Business metrics that feed financial statements

  - Revenue Drivers
    - Unit-based models (units × price)
    - User/customer-based models (customers × ARPU)
    - Cohort analysis structures
    - Customer lifetime value (CLV/LTV)
    - Churn rate modeling
    - Market share calculations
    - Pricing models (static, dynamic, tiered)
  - Cost Drivers
    - Variable cost structures (unit-based, percentage-based)
    - Fixed cost allocations
    - Step-function costs
    - Cost allocation methods (direct, activity-based)
    - Overhead rates
    - Depreciation schedules (straight-line, declining balance, MACRS)
    - Amortization schedules
  - Operational Metrics
    - Inventory models (FIFO, LIFO, weighted average)
    - Days Sales Outstanding (DSO)
    - Days Payable Outstanding (DPO)
    - Days Inventory Outstanding (DIO)
    - Cash Conversion Cycle
    - Capacity utilization models
    - Headcount/staffing models with hiring plans

  ---
  4. FINANCIAL STATEMENT MODELS

  - Income Statement (P&L)
    - Revenue line items (by product, segment, geography)
    - Cost of Goods Sold (COGS) calculations
    - Operating expenses (SG&A, R&D, marketing)
    - EBITDA calculations
    - Depreciation & Amortization
    - Interest expense/income
    - Tax calculations (effective rate, marginal rate)
    - Net income & EPS calculations
    - Common-size analysis (percentage of revenue)
  - Balance Sheet
    - Asset accounts (current, fixed, intangible)
    - Liability accounts (current, long-term)
    - Equity accounts (common stock, retained earnings, APIC)
    - Working capital calculations
    - Asset turnover ratios
    - Liquidity ratios (current, quick, cash)
    - Leverage ratios (debt-to-equity, interest coverage)
    - Automatic balancing mechanisms
  - Cash Flow Statement
    - Operating activities (indirect & direct methods)
    - Investing activities
    - Financing activities
    - Free Cash Flow (FCF) calculations
    - Cash reconciliation
    - Beginning/ending cash balance tracking
  - Statement Linkages
    - P&L → Balance Sheet connections (retained earnings, depreciation)
    - Balance Sheet → Cash Flow connections (working capital changes)
    - Circular reference resolution (interest on cash, debt scheduling)
    - Consistency checks and validation

  ---
  5. SCENARIO & SENSITIVITY ANALYSIS

  Leverage your simulation capabilities

  - Scenario Framework
    - Base case / best case / worst case structures
    - Assumption management system
    - Scenario comparison utilities
    - Weighted scenario probabilities
  - Sensitivity Analysis
    - Single-variable sensitivity (tornado charts data)
    - Two-variable sensitivity (data tables)
    - Monte Carlo simulation integration with your existing distributions
    - Value-at-Risk (VaR) calculations
    - Scenario probability distributions
  - Stochastic Modeling
    - Revenue uncertainty models
    - Cost volatility models
    - Market risk factors
    - Correlation between driver variables
    - Confidence interval projections

  ---
  6. FINANCIAL RATIOS   5. FINANCIAL RATIOS & METRICS METRICS

  - Profitability Ratios
    - Gross margin, operating margin, net margin
    - Return on Assets (ROA)
    - Return on Equity (ROE)
    - Return on Invested Capital (ROIC)
    - Economic Value Added (EVA)
  - Efficiency Ratios
    - Asset turnover (inventory, receivables, fixed assets)
    - Working capital efficiency
    - Cash conversion cycle
  - Valuation Metrics
    - P/E ratio
    - EV/EBITDA
    - Price-to-Sales
    - Price-to-Book
    - Discounted Cash Flow (DCF) valuation
  - Credit & Risk Metrics
    - Debt service coverage ratio (DSCR)
    - Interest coverage ratio
    - Z-score (Altman)
    - Quick ratio, current ratio

  ---
  7. DEBT   6. DEBT & FINANCING MODELS FINANCING MODELS

  - Debt Schedules
    - Amortization tables (principal & interest)
    - Revolving credit facilities
    - Interest rate models (fixed, variable, LIBOR+spread)
    - Debt covenant tracking
    - Debt issuance and retirement
  - Equity Financing
    - Equity raise modeling
    - Dilution calculations
    - Option pool management
    - Waterfall analysis
    - Cap table integration concepts
  - Capital Structure
    - Weighted Average Cost of Capital (WACC)
    - Optimal capital structure analysis
    - Cost of debt vs. cost of equity

  ---
  8. DATA STRUCTURES   7. DATA STRUCTURES & ARCHITECTURE ARCHITECTURE

  - Core Model Objects
    - FinancialPeriod struct
    - Account protocol and implementations
    - LineItem struct (with amounts by period)
    - Statement protocols (IncomeStatement, BalanceSheet, CashFlow)
    - FinancialModel container class
    - Scenario struct
  - Formula Engine
    - Expression parser (for Excel-like formulas)
    - Dependency graph for calculation order
    - Circular reference detection and iteration
    - Formula audit trail
  - Data Access Patterns
    - Time-series access (get value for specific period)
    - Aggregate functions (sum, average over periods)
    - Growth rate calculations
    - Period-over-period changes

  ---
  9. INPUT/OUTPUT & INTEGRATION

  - Data Import
    - CSV import for historical financials
    - JSON configuration for model assumptions
    - Excel file parsing (if needed)
    - Historical data normalization
  - Data Export
    - CSV export for analysis
    - JSON export for sharing/versioning
    - Report generation (formatted financial statements)
    - Chart data preparation
  - Validation & Auditing
    - Balance sheet balance checks
    - Cash flow reconciliation checks
    - Ratio reasonableness checks
    - Assumption boundary validation
    - Audit trail for assumption changes

  ---
  10. ADVANCED FEATURES

  - Machine Learning Integration
    - Revenue forecasting using your statistical tools
    - Cost prediction models
    - Anomaly detection in projections
  - Optimization
    - Product mix optimization
    - Capital allocation optimization
    - Cost minimization models
    - Goal programming for multi-objective scenarios
  - Consolidation
    - Multi-entity aggregation
    - Intercompany elimination
    - Currency conversion
    - Segment reporting

  ---
  11. USER EXPERIENCE & API DESIGN

  - Fluent API Design
    - Builder patterns for model construction
    - Method chaining for readability
    - Type-safe period references
    - Clear error handling
  - Model Templates
    - SaaS business model template
    - E-commerce model template
    - Manufacturing model template
    - Startup/venture model template
  - Documentation & Examples
    - Comprehensive DocC documentation
    - Playground examples
    - Sample models with realistic data
    - Integration guides