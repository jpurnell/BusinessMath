//
//  CommandLineVisualization.swift
//  BusinessMath
//
//  Created by Justin Purnell on 10/22/25.
//

import Foundation

/// Visualization utilities for command-line display of simulation results and data analysis.
///
/// This module provides text-based visualization functions that render charts and graphs
/// directly in the terminal using Unicode characters and formatting.
///
/// ## Use Cases
///
/// - Display Monte Carlo simulation distributions
/// - Visualize histogram data in terminal environments
/// - Quick data exploration without external plotting tools
/// - CLI applications and scripts
///
/// ## Example
///
/// ```swift
/// let results = SimulationResults(values: simulationData)
/// let histogram = results.histogram(bins: 20)
/// let plot = plotHistogram(histogram)
/// print(plot)
/// ```

// MARK: - Histogram Plotting

/// Renders a horizontal bar chart histogram for command-line display.
///
/// Creates a visual representation of histogram data using Unicode block characters (█).
/// The output includes:
/// - Header with bin count and total sample count
/// - Each bin showing: range, bar graph, count, and percentage
/// - Automatic scaling so the largest bin uses the full bar width
///
/// ## Output Format
///
/// ```
/// Histogram (10 bins, 1,000 samples):
///
/// [    0.00 -   10.00):  ████████████ 234 ( 23.4%)
/// [   10.00 -   20.00):  ██████████████████ 456 ( 45.6%)
/// [   20.00 -   30.00):  ████████ 156 ( 15.6%)
/// ...
/// ```
///
/// ## Features
///
/// - **Auto-scaling**: Bars automatically scale relative to the maximum count
/// - **Unicode rendering**: Uses █ (U+2588) for solid bar appearance
/// - **Smart formatting**: Adjusts decimal places based on value magnitude
/// - **Percentage display**: Shows percentage of total for each bin
/// - **Clean alignment**: Right-aligned numbers for easy reading
///
/// ## Parameters
///
/// - Parameter histogram: Array of tuples containing range and count for each bin,
///   typically generated by `SimulationResults.histogram(bins:)`
///
/// - Returns: A formatted string containing the complete histogram visualization
///
/// ## Example
///
/// ```swift
/// // Generate histogram from simulation results
/// let results = SimulationResults(values: revenueData)
/// let histogram = results.histogram(bins: 20)
///
/// // Plot and display
/// let plot = plotHistogram(histogram)
/// print(plot)
///
/// // Output:
/// // Histogram (20 bins, 10,000 samples):
/// //
/// // [  950.00 - 1,000.00):  ████████████ 234 (  2.3%)
/// // [1,000.00 - 1,050.00):  ██████████████████ 456 (  4.6%)
/// // ...
/// ```
///
/// ## Customization
///
/// The function uses these default parameters:
/// - Maximum bar width: 50 characters
/// - Decimal places: 2 (auto-adjusts for large numbers)
/// - Bar character: █ (solid block)
///
/// For custom visualizations, create your own histogram data structure
/// and pass it to this function.
///
/// - Complexity: O(n) where n is the number of bins
public func plotHistogram(_ histogram: [(range: Range<Double>, count: Int)]) -> String {
	// Handle empty histogram
	guard !histogram.isEmpty else {
		return "Empty histogram"
	}

	// Calculate total count and max count for scaling
	let totalCount = histogram.reduce(0) { $0 + $1.count }
	let maxCount = histogram.map { $0.count }.max() ?? 1

	// Configuration
	let maxBarWidth = 50

	// Determine decimal places based on value magnitude
	let maxValue = histogram.map { $0.range.upperBound }.max() ?? 1.0
	let decimalPlaces: Int
	if maxValue > 1000 {
		decimalPlaces = 0
	} else if maxValue > 10 {
		decimalPlaces = 1
	} else {
		decimalPlaces = 2
	}

	// Build output string
	var output = "Histogram (\(histogram.count) bin\(histogram.count == 1 ? "" : "s"), \(totalCount) sample\(totalCount == 1 ? "" : "s")):\n\n"

	// Render each bin
	for bin in histogram {
		// Calculate bar width (proportional to count)
		let barWidth = maxCount > 0 ? Int(Double(bin.count) / Double(maxCount) * Double(maxBarWidth)) : 0
		let bar = String(repeating: "█", count: barWidth)

		// Pad bar to fixed width for alignment
		let paddedBar = bar.padding(toLength: maxBarWidth, withPad: " ", startingAt: 0)

		// Calculate percentage
		let percentage = totalCount > 0 ? (Double(bin.count) / Double(totalCount) * 100.0) : 0.0

		// Format the line based on decimal places
		let line: String
		switch decimalPlaces {
		case 0:
			line = String(format: "[%8.0f - %8.0f):  %@ %4d (%5.1f%%)\n",
				bin.range.lowerBound,
				bin.range.upperBound,
				paddedBar,
				bin.count,
				percentage
			)
		case 1:
			line = String(format: "[%8.1f - %8.1f):  %@ %4d (%5.1f%%)\n",
				bin.range.lowerBound,
				bin.range.upperBound,
				paddedBar,
				bin.count,
				percentage
			)
		default: // 2 decimal places
			line = String(format: "[%8.2f - %8.2f):  %@ %4d (%5.1f%%)\n",
				bin.range.lowerBound,
				bin.range.upperBound,
				paddedBar,
				bin.count,
				percentage
			)
		}

		output += line
	}

	return output
}
