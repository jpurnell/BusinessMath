CODING RULES FOR BUSINESSMATH LIBRARY

  Based on your existing codebase:

  1. File Organization

  - One primary concept per file (function, struct, enum, or protocol)
  - Directory structure reflects conceptual hierarchy
  - File naming: camelCase for files, descriptive names
  - Use zzz In Process/ for work-in-progress code

  2. Code Style

  - Generic Programming: Use <T: Real> for numeric functions (from swift-numerics)
  - Public API: All user-facing functions/types marked public
  - Function Signatures: Descriptive parameter labels (discountRate r: T pattern)
  - Guard Clauses: Use guard for input validation, return sensible defaults (e.g., T(0))
  - Concise Logic: Prefer functional patterns (reduce, map) where readable

  3. Documentation

  - Triple-slash comments (///) for all public APIs
  - Structure: Brief summary, then detailed description if needed
  - Parameters: Document each with - Parameter name: description
  - Returns: Describe return value with - Returns:
  - Complexity: Include when non-trivial (- Complexity: O(n))
  - Usage Examples: Include Swift code blocks in backticks
  - Excel Equivalents: Note when applicable (/// Equivalent of Excel AVERAGE(xx:xx))

  4. Types & Protocols

  - Protocols: Define behavior contracts (e.g., DistributionRandom)
  - Structs: For value types and implementations (preferred over classes)
  - Enums: For configuration/options (e.g., Population: String)
  - Associated Types: Use in protocols for generic flexibility

  5. Error Handling

  - Custom Error enums in dedicated files (e.g., GoalSeekError.swift)
  - Use throws for operations that can fail
  - Descriptive error cases

  6. Testing

  - Swift Testing framework
  - Test files mirror source structure (Tests/BusinessMathTests/...)
  - Use OSLog for test logging (Logger(subsystem:category:))
  - Descriptive test names (testArithmeticGeometricMean)
  - Use realistic test values with known results

  7. Dependencies

  - Import only what's needed (Foundation, Numerics)
  - Use @testable import BusinessMath in tests
  - Enable strict concurrency (StrictConcurrency feature flag)

  8. File Headers

  //
  //  FileName.swift
  //  BusinessMath
  //
  //  Created by [Author] on [Date].
  //

